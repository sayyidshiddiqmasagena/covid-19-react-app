{"version":3,"sources":["logo.svg","CountryPicker.js","CoronaTracker.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","fetchCountries","axios","get","then","response","setState","countries","data","handleChange","event","value","target","handleCountryChange","state","country","this","FormControl","NativeSelect","onChange","map","c","name","Component","CoronaTracker","confirm","confirmed","deaths","recovered","lastupdate","lastUpdate","getData","confirmG","deathsG","recoveredG","catch","error","console","log","Fragment","className","Number","toLocaleString","start","end","duration","separator","Date","toDateString","class","method","action","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6ff2b53.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\n\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default class CountryPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            countries:[],\r\n            country:\"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchCountries()\r\n    }\r\n    fetchCountries=()=>{\r\n        axios.get(\"https://covid19.mathdro.id/api/countries\")\r\n        .then(response=>{\r\n            this.setState({\r\n                countries:response.data.countries\r\n            })\r\n        })\r\n    }\r\n    handleChange=(event)=>{\r\n        var value=event.target.value;\r\n        this.props.handleCountryChange(value);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n          <center>\r\n              <FormControl>\r\n                  <NativeSelect onChange={this.handleChange}>\r\n                     <option key=\"global\" value=\"global\">Global</option>\r\n                     {\r\n                         this.state.countries.map(c=>(\r\n                         <option key={c.name} value={c.name}>{c.name}</option>\r\n                         ))\r\n                     }\r\n                    \r\n                      </NativeSelect>\r\n                    \r\n                  </FormControl>\r\n              </center>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/corona.css\";\r\nimport CountUp from \"react-countup\";\r\nimport CountryPicker from \"./CountryPicker\";\r\n\r\nexport default class CoronaTracker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      confirm: null,\r\n      deaths: null,\r\n      recovered: null,\r\n      country: null,\r\n      confirmG: null,\r\n      deathsG: null,\r\n      recoveredG: null,\r\n      lastupdate: null,\r\n    };\r\n  }\r\n  handleCountryChange = (country) => {\r\n    axios\r\n      .get(\"https://covid19.mathdro.id/api/countries/\" + country)\r\n      .then((response) => {\r\n        this.setState({\r\n          confirm: response.data.confirmed.value,\r\n          deaths: response.data.deaths.value,\r\n          recovered: response.data.recovered.value,\r\n          lastupdate: response.data.lastUpdate,\r\n        });\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n  getData = () => {\r\n    axios\r\n      .get(\"https://covid19.mathdro.id/api\")\r\n      .then((response) => {\r\n        this.setState({\r\n          confirmG: response.data.confirmed.value,\r\n          deathsG: response.data.deaths.value,\r\n          recoveredG: response.data.recovered.value,\r\n          lastupdate: response.data.lastUpdate,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <br />\r\n        <div className=\"corona-body\">\r\n          <div className=\"container\">\r\n            <div>\r\n              <center className=\"judul\">WORLD WIDE COVID-19 TRACKER</center>\r\n              <br />\r\n              <div className=\"name\">\r\n                <center>Internasional</center>\r\n              </div>\r\n            </div>\r\n            <center>\r\n              <div className=\"card-deck card-decks\">\r\n                <div className=\"card confirm box\">\r\n                  <div className=\"card-title c-title\">\r\n                    <center>Positif</center>\r\n                  </div>\r\n                  <div className=\"card-body c-body text-center\">\r\n                    <div className=\"number\">\r\n                      {Number(this.state.confirmG).toLocaleString(\"id\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"card recovered box\">\r\n                  <div className=\"card-title c-title\">\r\n                    <center>Sembuh</center>\r\n                  </div>\r\n                  <div className=\"card-body c-body text-center\">\r\n                    <div className=\"number\">\r\n                      {Number(this.state.recoveredG).toLocaleString(\"id\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"card deaths box\">\r\n                  <div className=\"card-title c-title\">\r\n                    <center>Meninggal</center>\r\n                  </div>\r\n                  <div className=\"card-body c-body text-center\">\r\n                    <div className=\"number\">\r\n                      {Number(this.state.deathsG).toLocaleString(\"id\")}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </center>\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <div className=\"name\">\r\n            <center>Negara</center>\r\n          </div>\r\n          <div className=\"pencarian\">\r\n            <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n          </div>\r\n          <div className=\"container\">\r\n            <div className=\"card-deck card-decks\">\r\n              <div className=\"card confirm box\">\r\n                <div className=\"card-title c-title\">\r\n                  <center>Positif</center>\r\n                </div>\r\n                <div className=\"card-body c-body text-center\">\r\n                  <CountUp\r\n                    start={0}\r\n                    end={this.state.confirm}\r\n                    duration={1}\r\n                    separator=\".\"\r\n                    className=\"number\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"card recovered box\">\r\n                <div className=\"card-title c-title\">\r\n                  <center>Sembuh</center>\r\n                </div>\r\n                <div className=\"card-body c-body text-center\">\r\n                  <CountUp\r\n                    start={0}\r\n                    end={this.state.recovered}\r\n                    duration={1}\r\n                    separator=\".\"\r\n                    className=\"number\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"card deaths box\">\r\n                <div className=\"card-title c-title\">\r\n                  <center>Meninggal</center>\r\n                </div>\r\n                <div className=\"card-body c-body text-center\">\r\n                  <CountUp\r\n                    start={0}\r\n                    end={this.state.deaths}\r\n                    duration={1}\r\n                    separator=\".\"\r\n                    className=\"number\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n          </div>\r\n          <center>\r\n            <p className=\"lastupdate\">\r\n              <u>\r\n                Terakhir Diperbaharui :{\" \"}\r\n                {new Date(this.state.lastupdate).toDateString()}\r\n              </u>\r\n            </p>\r\n          </center>\r\n          <div class=\"pindah-page\">\r\n            <form\r\n              method=\"get\"\r\n              action=\"https://sayyidshiddiqmasagena.github.io/\"\r\n            >\r\n              <button type=\"keporto\" name=\"button\">\r\n                Portofolio\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport CoronaTracker from './CoronaTracker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <CoronaTracker/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}